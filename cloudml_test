library(keras)
library(readr)
library(cloudml)
# create the base pre-trained model
base_model <- application_vgg16(weights = 'imagenet', include_top = FALSE)

# model <- keras_model_sequential()%>%
#   base_model%>%
#   layer_flatten() %>%
#   layer_dense(units = 256,activation = 'relu') %>%
#   layer_dense(units = 7,activation = 'sigmoid')
# add our custom layers
predictions <- base_model$output %>% 
  layer_global_average_pooling_2d() %>% 
  layer_dense(units = 1024, activation = 'relu') %>% 
  layer_dense(units = 2, activation = 'softmax')

# this is the model we will train
model <- keras_model(inputs = base_model$input, outputs = predictions)

# first: train only the top layers (which were randomly initialized)
# i.e. freeze all convolutional InceptionV3 layers
freeze_weights(base_model)

# compile the model (should be done *after* setting layers to non-trainable)
model %>% compile(optimizer = 'rmsprop', loss = 'categorical_crossentropy')
train_datagen = image_data_generator(
  rescale = 1/255,
  rotation_range = 40,
  width_shift_range = 0.2,
  height_shift_range = 0.2,
  shear_range = 0.2,
  zoom_range = 0.2,
  horizontal_flip = TRUE,
  fill_mode = "nearest"
)
test_datagen <- image_data_generator(rescale = 1/255)
train_generator <- flow_images_from_directory(
  gs_local_dir("gs://nyu-training-testing/Demo/train/"),
  train_datagen,
  target_size = c(224, 224),
  batch_size = 20,
  class_mode = "categorical"
)
test_generator <- flow_images_from_directory(
  gs_local_dir("gs://nyu-training-testing/Demo/test/"),
  test_datagen,
  target_size = c(224, 224),
  batch_size = 20,
  class_mode = "categorical"
)

model %>% compile(
  loss = "categorical_crossentropy",
  optimizer = optimizer_rmsprop(lr = 2e-5),
  metrics = c("accuracy")
  
)
model%>% fit_generator(
  train_generator,
  steps_per_epoch = 3,
  epochs = 3,
  validation_data = test_generator,
  validation_steps = 5
)
